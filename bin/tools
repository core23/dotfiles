#!/bin/bash
set -eu

#
# File:         tools
# Author:       Christian Gripp
# E-Mail:       mail@core23.de
# Homepage:     https://core23.de
#

SUPPORTED_TOOLS="apt brew ruby php python"

help() {
  cat <<EOF 1>&2
Show information for installed tools
Usage: $(basename "$0") [options] [tool ..]
   Options
      -f Fetch new version information
      -u Update all tools
      -o Show outdated versions
      -h help

   Supported tools:
      ${SUPPORTED_TOOLS}
EOF
  exit 1
}

heading() {
  echo -e "\033[0;32m"
  echo "+--------------------"
  echo "| $1"
  echo "+--------------------"
  echo -e "\033[0m"
}

function_exists() {
    declare -f -F $1 > /dev/null
    return $?
}

tool_apt() {
  local cmd=$1
  local fetch=$2

  if [[ ! $(command -v apt) ]]; then
      return
  fi

  heading "APT"

  if [[ "${fetch}"  ]]; then
    timeout 30 apt update
  fi

  if [[ "${cmd}" == "update" ]]; then
    apt upgrade
  elif [[ "${cmd}" == "outdated" ]]; then
    apt list --upgradable
  elif [[ "${cmd}" == "list" ]]; then
    apt list --installed
  fi

  echo
}

tool_brew() {
  local cmd=$1
  local fetch=$2

  if [[ ! $(command -v brew) ]]; then
      return
  fi

  heading "Brew Tools"

  if [[ "${fetch}"  ]]; then
    timeout 30 brew update
  fi

  if [[ "${cmd}" == "update" ]]; then
    brew upgrade
    # brew cask upgrade
  elif [[ "${cmd}" == "outdated" ]]; then
    brew outdated
    brew cask outdated
  elif [[ "${cmd}" == "list" ]]; then
    brew --version
    brew list --versions
  fi

  echo 
}

tool_npm() {
  local cmd=$1

  if [[ ! $(command -v npm) ]]; then
      return
  fi

  heading "Node modules"

  if [[ "${cmd}" == "update" ]]; then
    sudo npm cache clean -f
    sudo npm install -g n
    sudo n stable
    npm update -g
  elif [[ "${cmd}" == "outdated" ]]; then
    echo "Not yet supported"
  elif [[ "${cmd}" == "list" ]]; then
    npm list -g --depth=0
  fi

  echo
}

tool_php() {
  local cmd=$1

  if [[ ! $(command -v php) || ! $(command -v composer) ]]; then
      return
  fi

  heading "PHP modules"

  if [[ "${cmd}" == "update" ]]; then
    composer global update || true
  elif [[ "${cmd}" == "outdated" ]]; then
    composer global outdated -D || true
  elif [[ "${cmd}" == "list" ]]; then
    composer global show -D || true
  fi

  echo
}

tool_python() {
  local cmd=$1

  if [[ ! $(command -v pip) ]]; then
      return
  fi

  heading "Python modules"

  if [[ "${cmd}" == "update" ]]; then
    pip install --upgrade
  elif [[ "${cmd}" == "outdated" ]]; then
    pip list --outdated
  elif [[ "${cmd}" == "list" ]]; then
    pip list
  fi

  echo
}

tool_ruby() {
  local cmd=$1

  if [[ ! $(command -v gem) ]]; then
      return
  fi

  heading "Ruby gems"

  if [[ "${cmd}" == "update" ]]; then
    gem update --system
    gem update
  elif [[ "${cmd}" == "outdated" ]]; then
    gem outdated
  elif [[ "${cmd}" == "list" ]]; then
    ruby --version
    echo "gem ($(gem --version))"
    gem query --local
  fi

  echo
}

cmd="list"
fetch=""

while getopts fuoh opt; do
  case "$opt" in
  f) fetch="1" ;;
  u) cmd="update" ;;
  o) cmd="outdated" ;;
  h) help ;;
  [?]) help ;;
  esac
done

shift $((OPTIND - 1))


if [[ "${cmd}" == "update" ]]; then
  echo "Updating tools"
elif [[ "${cmd}" == "outdated" ]]; then
  echo "Showing outdated version"
fi

tools=$@

if [[ -z "${tools}" ]]; then
  tools="${SUPPORTED_TOOLS}"
fi

for tool in $tools; do
  func_name="tool_$tool"

  if type "${func_name}" &>/dev/null; then
    ${func_name} "${cmd}" "${fetch}"
  else
    echo "Tool $tool is not yet supported"
    exit 1
  fi
done
